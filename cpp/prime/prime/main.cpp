#include <iostream>
#include <biginteger.cpp>
#include <init.cpp>
using namespace std;

int main(int argc, char *argv[]) {

    // иницилизация программы
    if (!init(argc, argv)) { cout << "неверные входные параметры \n"; return 0; }

    // исходное нат. число
    BigInteger n(argv[2]);

    // вероятность того,
    // что число простое
    bool prm = true;

    // исключаем первые простые числа
    // для правильной работы
    // перебора делителей в цикле

    if ( n == 2  ||
         n == 3  ||
         n == 5  ||
         n == 7  ||
         n == 11 ||
         n == 13 ||
         n == 17 ||
         n == 19 ||
         n == 23 ||
         n == 29
    ) { cout << "число является простым \n"; return 0; }

    // если имеются простые делители
    if (  n == 0      ||
          n == 1      ||
          n % 2 == 0  ||
          n % 3 == 0  ||
          n % 5 == 0  ||
          n % 7 == 0  ||
          n % 11 == 0 ||
          n % 13 == 0 ||
          n % 17 == 0 ||
          n % 19 == 0 ||
          n % 23 == 0 ||
          n % 29 == 0
    ) prm = false;

    if (!prm) { cout << "число не является простым \n"; return 0; }

    // исследуем числа большей размерности

    // выбирается некоторое число m,
    // равное произведению простых чисел без степеней
    // и рассматриваются только те элементы множества {2,3,...,q = sqrt{n}},
    // которые взаимно просты с m

    int m = 30;

    BigInteger q = n.sqrt() + 1;

    // m = 30 = 2*3*5
    // p[0] - первое простое число в промежутке [30..60]
    // p[7] - последнее простое число в промежутке [30..60]
    BigInteger p[8] = {31, 37, 41, 43, 47, 49, 53, 59};

    while ( p[7] <= q     &&
            n % p[0] != 0 &&
            n % p[1] != 0 &&
            n % p[2] != 0 &&
            n % p[3] != 0 &&
            n % p[4] != 0 &&
            n % p[5] != 0 &&
            n % p[6] != 0 &&
            n % p[7] != 0
    ) {
            p[0] += m;
            p[1] += m;
            p[2] += m;
            p[3] += m;
            p[4] += m;
            p[5] += m;
            p[6] += m;
            p[7] += m;
    }

    if (  p[7] <= q                   ||
          p[0] <= q  && n % p[0] == 0 ||
          p[1] <= q  && n % p[1] == 0 ||
          p[2] <= q  && n % p[2] == 0 ||
          p[3] <= q  && n % p[3] == 0 ||
          p[4] <= q  && n % p[4] == 0 ||
          p[5] <= q  && n % p[5] == 0 ||
          p[6] <= q  && n % p[6] == 0
    ) prm = false;

    if (prm) cout << "число является простым \n";
    else cout << "число не является простым \n";

    return 0;
}
